<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HEXO博客搭建及自动化部署</title>
    <url>/posts/951732e0/</url>
    <content><![CDATA[<hr>
<p>目录：</p>
<!-- vscode-markdown-toc -->
<pre><code>* 1. [环境准备](#)
* 2. [安装Hexo](#Hexo)
    * 2.1. [使用npm安装hexo](#npmhexo)
    * 2.2. [初始化博客](#-1)
    * 2.3. [本地预览](#-1)
* 3. [创建Github Pages](#GithubPages)
    * 3.1. [远程仓库配置](#-1)
    * 3.2. [同步本地文件至GitHub](#GitHub)
    * 3.3. [添加GitHub Actions](#GitHubActions)
</code></pre>
<!-- vscode-markdown-toc-config
    numbering=true
    autoSave=true
    /vscode-markdown-toc-config -->
<!-- /vscode-markdown-toc -->



<h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. <a name=''></a>环境准备</h3><ul>
<li><a href='https://git-scm.com/' title='官方下载页面'>Git</a></li>
<li><a href='https://nodejs.org/en/download/' title='官方下载页面'>Node.js</a> <blockquote>
<p>Node包含npm</p>
</blockquote>
</li>
</ul>
<p>查看是否安装成功</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>——</p>
<h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. <a name='Hexo'></a>安装Hexo</h3><h4 id="2-1-使用npm安装hexo"><a href="#2-1-使用npm安装hexo" class="headerlink" title="2.1. 使用npm安装hexo"></a>2.1. <a name='npmhexo'></a>使用npm安装hexo</h4><p>在计算机本地新建文件夹，右键打开git bash。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="2-2-初始化博客"><a href="#2-2-初始化博客" class="headerlink" title="2.2. 初始化博客"></a>2.2. <a name='-1'></a>初始化博客</h4><p>在新建的文件夹中打开git bash或Terminal</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 初始化</span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"># 进入目录</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>此时，&lt;folder&gt;目录下有类似下面的目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .GitHub </span><br><span class="line">├── node_modules   # Hexo 所需依赖</span><br><span class="line">├── _config.yml    # Hexo 全局配置文件</span><br><span class="line">├── package.json   # npm软件包及版本信息</span><br><span class="line">├── scaffolds      # 模版文件夹</span><br><span class="line">|   ├── draft.md   # 草稿模板</span><br><span class="line">|   ├── page.md    # 页面模板</span><br><span class="line">|   └── post.md    # 文章模板</span><br><span class="line">├── source         # 资源文件夹</span><br><span class="line">|   ├── _drafts    # 草稿文件夹</span><br><span class="line">|   └── _posts     # 文章文件夹</span><br><span class="line">├── .gitignore     # Git 忽略文件信息</span><br><span class="line">├── _config.[主题名].yml # 主题的配置文件</span><br><span class="line">└── themes         # 主题文件夹</span><br></pre></td></tr></table></figure>

<h4 id="2-3-本地预览"><a href="#2-3-本地预览" class="headerlink" title="2.3. 本地预览"></a>2.3. <a name='-1'></a>本地预览</h4><p>安装完成后，先在本地预览查看是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以默认端口启动本地预览，默认地址为http://localhost:4000</span><br><span class="line">hexo s</span><br><span class="line"># 若要指定端口，则使用-p 参数，如8888端口</span><br><span class="line">hexo s -p 8888</span><br></pre></td></tr></table></figure>
<p>在浏览器中访问默认地址即可</p>
<h3 id="3-创建Github-Pages"><a href="#3-创建Github-Pages" class="headerlink" title="3. 创建Github Pages"></a>3. <a name='GithubPages'></a>创建Github Pages</h3><h4 id="3-1-远程仓库配置"><a href="#3-1-远程仓库配置" class="headerlink" title="3.1. 远程仓库配置"></a>3.1. <a name='-1'></a>远程仓库配置</h4><p>因为要使用Github actions来进行自动部署，所以需要用到2个仓库。</p>
<p>假设分别设为以下2个仓库：</p>
<ul>
<li><p>仓库1：<a href="mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;</a>:GNWING/Blog_Source  ：#该仓库存放源文件，包括编辑的md文章，hexo项目文件，即对应上述的本地初始化的文件夹，建议设置为私有，可以防止配置文件等信息泄露，</p>
</li>
<li><p>仓库2：<a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#117;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#104;&#117;&#x62;&#46;&#x63;&#x6f;&#109;</a>:GNWING/GNWING.github.io ：#存放的是使用源文件生产的静态资源文件，一般对应生成的public文件夹，就是GitHub Pages的页面内容</p>
</li>
</ul>
<p>创建好上面两个仓库后，还需要对仓库进行如下设置：</p>
<p>1、ACCESS_TOKEN:<br>这个 ACCESS_TOKEN 是访问 GitHub API 的令牌，可以在 GitHub 主页，点击个人头像，Settings -&gt; Developer settings -&gt; Personal access tokens 进行生成或更新，第一次生成后你可以看到这个令牌，然后再也不会显示，因此你需要记下来，假如这个字符串是 aaa，然后打开仓库 1 的设置页面，设置 secrets，加入环境变量， name 是 ACCESS_TOKEN，value 是 aaa。如下图所示：<br><img src="1.jpeg" alt="ACCESS_TOKEN"><br><img src="2.jpeg" alt="ACCESS_TOKEN"><br><img src="3.jpeg" alt="ACCESS_TOKEN"></p>
<h4 id="3-2-同步本地文件至GitHub"><a href="#3-2-同步本地文件至GitHub" class="headerlink" title="3.2. 同步本地文件至GitHub"></a>3.2. <a name='GitHub'></a>同步本地文件至GitHub</h4><p>打开安装Hexo时创建的&lt;folder&gt;，并右键打开git bash或Terminal:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 初始化Git仓库</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"># 关联到远程Git仓库（源码）</span><br><span class="line">git remote add origin https://github.com/GNWING/Blog_Source.git</span><br><span class="line"></span><br><span class="line"># 配置对应分支</span><br><span class="line">git branch -M main</span><br><span class="line"></span><br><span class="line"># 上传</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>


<h4 id="3-3-添加GitHub-Actions"><a href="#3-3-添加GitHub-Actions" class="headerlink" title="3.3. 添加GitHub Actions"></a>3.3. <a name='GitHubActions'></a>添加GitHub Actions</h4><p>在仓库 1 的根目录下，创建 .github/workflows/main.yml 文件，这就是 GitHub Actions 功能的配置文件，用于告诉 GitHub 要做哪些事情，写入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: Deploy GitHub Pages</span><br><span class="line"></span><br><span class="line"># 触发条件：在 push 到 master 分支后</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line"></span><br><span class="line"># 任务</span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    # 服务器环境：最新版 Ubuntu</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      # 拉取代码</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          persist-credentials: false</span><br><span class="line"></span><br><span class="line">      # 设置Hexo所需的Node.js版本，高版本Node.js在执行时会报错</span><br><span class="line">      - name: Use Node.js 12.x</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: &#x27;12.x&#x27;</span><br><span class="line">      </span><br><span class="line">      # 在服务器安装Hexo，用于后续生成静态文件</span><br><span class="line">      - name: install hexo-cli</span><br><span class="line">        run: npm install -g hexo-cli</span><br><span class="line">      - name: Cache NPM dependencies</span><br><span class="line">        uses: actions/cache@v2</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="line">      # 安装相关依赖</span><br><span class="line">      - name: Install Dependencies</span><br><span class="line">        run: npm install</span><br><span class="line">      - name: clean</span><br><span class="line">        run: hexo clean</span><br><span class="line">      - name: Build</span><br><span class="line">        run: npm run build</span><br><span class="line"></span><br><span class="line">      # 2、部署到 GitHub Pages</span><br><span class="line">      - name: Deploy</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@releases/v3</span><br><span class="line">        with:</span><br><span class="line">          ACCESS_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class="line">          REPOSITORY_NAME: GNWING/gnwing.github.io</span><br><span class="line">          BRANCH: master</span><br><span class="line">          FOLDER: public</span><br><span class="line">          #注意这里的 public 是仓库根目录下的 public，也就是 npm run build 生成静态资源的路径，比如有的人是 `docs/.vuepress/dist`</span><br></pre></td></tr></table></figure>

<h4 id="3-4-推送仓库，测试Actions"><a href="#3-4-推送仓库，测试Actions" class="headerlink" title="3.4 推送仓库，测试Actions"></a>3.4 推送仓库，测试Actions</h4><p>打开git bash或Terminal:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit &quot;Add Github Actions&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>推送后，在Gihub仓库Actions页面查看运行情况，若出现错误，可查看详细日志信息<br><img src="4.jpg" alt="Actions"><br><img src="5.jpg" alt="Actions"></p>
]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hello_World</tag>
      </tags>
  </entry>
</search>
